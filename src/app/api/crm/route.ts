import { NextRequest, NextResponse } from 'next/server'

interface FormData {
  name: string
  phone: string
  direction: string
  message?: string
}

interface AmoCRMContact {
  name: string
  custom_fields_values?: Array<{
    field_id: number
    values: Array<{ value: string }>
  }>
}

interface AmoCRMLead {
  name: string
  price: number
  custom_fields_values?: Array<{
    field_id: number
    values: Array<{ value: string }>
  }>
  _embedded?: {
    contacts?: AmoCRMContact[]
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è amoCRM (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const AMOCRM_CONFIG = {
  subdomain: process.env.AMOCRM_SUBDOMAIN || 'your-subdomain',
  clientId: process.env.AMOCRM_CLIENT_ID || 'your-client-id',
  clientSecret: process.env.AMOCRM_CLIENT_SECRET || 'your-client-secret',
  redirectUri: process.env.AMOCRM_REDIRECT_URI || `${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/amocrm/callback`,
  accessToken: process.env.AMOCRM_ACCESS_TOKEN || 'your-access-token'
}

// ID –ø–æ–ª–µ–π –≤ amoCRM (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ amoCRM)
const FIELD_IDS = {
  phone: 264911, // ID –ø–æ–ª—è "–¢–µ–ª–µ—Ñ–æ–Ω"
  direction: 264913, // ID –ø–æ–ª—è "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
  source: 264915 // ID –ø–æ–ª—è "–ò—Å—Ç–æ—á–Ω–∏–∫"
}

interface AmoCRMResponse {
  _embedded?: {
    leads?: Array<{ id: number }>
    contacts?: Array<{ id: number }>
  }
}

async function createAmoCRMLead(formData: FormData): Promise<AmoCRMResponse> {
  const { name, phone, direction, message } = formData

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const contact: AmoCRMContact = {
    name,
    custom_fields_values: [
      {
        field_id: FIELD_IDS.phone,
        values: [{ value: phone }]
      }
    ]
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
  const lead: AmoCRMLead = {
    name: `–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞: ${direction}`,
    price: 0,
    custom_fields_values: [
      {
        field_id: FIELD_IDS.direction,
        values: [{ value: direction }]
      },
      {
        field_id: FIELD_IDS.source,
        values: [{ value: '–õ–µ–Ω–¥–∏–Ω–≥ FitZone' }]
      }
    ],
    _embedded: {
      contacts: [contact]
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (message) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ
  }

  try {
    const response = await fetch(`https://${AMOCRM_CONFIG.subdomain}.amocrm.ru/api/v4/leads/complex`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${AMOCRM_CONFIG.accessToken}`
      },
      body: JSON.stringify([lead])
    })

    if (!response.ok) {
      throw new Error(`amoCRM API error: ${response.status}`)
    }

    const result = await response.json()
    return result
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ amoCRM:', error)
    throw error
  }
}

async function sendTelegramNotification(formData: FormData): Promise<void> {
  const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN
  const telegramChatId = process.env.TELEGRAM_CHAT_ID

  if (!telegramBotToken || !telegramChatId) {
    console.log('Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
    return
  }

  const message = `
üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ FitZone!

üë§ –ò–º—è: ${formData.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üèãÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${formData.direction}
${formData.message ? `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message}` : ''}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
  `.trim()

  try {
    await fetch(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: telegramChatId,
        text: message,
        parse_mode: 'HTML'
      })
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
  }
}

export async function POST(request: NextRequest) {
  try {
    const formData: FormData = await request.json()

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!formData.name || !formData.phone || !formData.direction) {
      return NextResponse.json(
        { error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/
    if (!phoneRegex.test(formData.phone)) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞' },
        { status: 400 }
      )
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ amoCRM
    let crmResult = null
    try {
      crmResult = await createAmoCRMLead(formData)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å amoCRM:', error)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ CRM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    try {
      await sendTelegramNotification(formData)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    console.log('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:', {
      name: formData.name,
      direction: formData.direction,
      timestamp: new Date().toISOString(),
      crmSuccess: !!crmResult
    })

    return NextResponse.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      leadId: crmResult?._embedded?.leads?.[0]?.id || null
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error)
    
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É'
      },
      { status: 500 }
    )
  }
}

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
export async function GET() {
  return NextResponse.json({
    status: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString(),
    endpoints: {
      POST: '/api/crm - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏'
    }
  })
}

