import { NextRequest, NextResponse } from 'next/server'

/**
 * –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å —Ñ—Ä–æ–Ω—Ç–∞.
 * –ü–æ–ª—è formPage / referer –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ –µ—Å–ª–∏ –≤—ã –∏—Ö –ø–µ—Ä–µ–¥–∞–¥–∏—Ç–µ ‚Äî –º—ã –≤–æ–∑—å–º—ë–º –∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ.
 */
interface FormData {
  name: string
  phone: string
  workPhone?: string
  direction: string
  message?: string
  formPage?: string
  referer?: string
}

const AMOCRM_CONFIG = {
  subdomain: process.env.AMOCRM_SUBDOMAIN || 'your-subdomain',
  longToken: process.env.AMOCRM_LONG_TOKEN || 'your-long-token',
  pipelineId: process.env.AMOCRM_PIPELINE_ID ? Number(process.env.AMOCRM_PIPELINE_ID) : undefined,
  siteUrl: process.env.SITE_URL || '' // –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –Ω–µ—Ç referer
}

// ====== Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ) ======
async function sendTelegramNotification(formData: FormData) {
  const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN
  const telegramChatId = process.env.TELEGRAM_CHAT_ID

  if (!telegramBotToken || !telegramChatId) {
    console.log('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
    return
  }

  try {
    const message = `üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ FitZone*

üë§ *–ò–º—è:* ${formData.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone}
${formData.workPhone ? `üì± *–†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω:* ${formData.workPhone}` : ''}
üèÉ *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* ${formData.direction}
${formData.message ? `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${formData.message}` : ''}

‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}
üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* FitZone Landing`

    const response = await fetch(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: telegramChatId,
        text: message,
        parse_mode: 'Markdown'
      })
    })

    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`)
    }

    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
  }
}

// ====== –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ ¬´–ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–µ¬ª (—Ç–∏–ø: —Ñ–æ—Ä–º–∞) —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ======
async function createUnsortedFormLead(
  request: NextRequest,
  formData: FormData
): Promise<{ success: boolean; uid?: string; leadId?: number; contactId?: number; error?: string }> {
  try {
    if (!AMOCRM_CONFIG.subdomain || !AMOCRM_CONFIG.longToken) {
      return { success: false, error: 'AmoCRM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }
    }

    const { name, phone } = formData
    const nowSec = Math.floor(Date.now() / 1000)

    // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫–µ, metadata.form_page –∏ metadata.referer –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ (NotBlank).
    // –ò—Å—Ç–æ—á–Ω–∏–∫–∏:
    // - –∏–∑ —Ç–µ–ª–∞ (formData.formPage / formData.referer),
    // - –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Referer,
    // - –∏–∑ SITE_URL,
    // - –∑–∞–ø–∞—Å–Ω–æ–π –¥–µ—Ñ–æ–ª—Ç (–Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞).
    const headerReferer = request.headers.get('referer') || request.headers.get('origin') || ''
    const form_page =
      (formData.formPage && formData.formPage.trim()) ||
      (headerReferer && headerReferer.trim()) ||
      (AMOCRM_CONFIG.siteUrl && AMOCRM_CONFIG.siteUrl.trim()) ||
      'https://example.com' // –Ω–µ –ø—É—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ NotBlank
    const referer =
      (formData.referer && formData.referer.trim()) ||
      (headerReferer && headerReferer.trim()) ||
      (AMOCRM_CONFIG.siteUrl && AMOCRM_CONFIG.siteUrl.trim()) ||
      'https://example.com' // –Ω–µ –ø—É—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ NotBlank

    // –¢—Ä–µ–±—É–µ–º—ã–µ –ø–æ–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: source_uid, source_name, metadata (+ created_at/pipeline_id –ø–æ –∂–µ–ª–∞–Ω–∏—é)
    // –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ–¥ _embedded: leads[], contacts[] (–∫–∞–∂–¥—ã–π –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º)
    // –¢–µ–ª–µ—Ñ–æ–Ω ‚Äî —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–ª–µ —á–µ—Ä–µ–∑ field_code: "PHONE".
    const payload = [
      {
        source_uid: 'fitzone_form',         // –≤–∞—à –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π UID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–ª—é–±–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π)
        source_name: 'FitZone Landing',     // —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        request_id: `req_${nowSec}`,        // –≤–µ—Ä–Ω—ë—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
        created_at: nowSec,                 // unix timestamp (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –ø–æ–ª–µ–∑–µ–Ω)
        ...(AMOCRM_CONFIG.pipelineId ? { pipeline_id: AMOCRM_CONFIG.pipelineId } : {}),
        metadata: {
          form_id: 'fitzone_form',          // ID —Ñ–æ—Ä–º—ã –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
          form_name: '–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏',        // –∏–º—è —Ñ–æ—Ä–º—ã
          form_page,                        // <-- –ù–ï –ø—É—Å—Ç–æ–µ (NotBlank)
          form_sent_at: nowSec,             // unix timestamp –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
          referer                           // <-- –ù–ï –ø—É—Å—Ç–æ–µ (NotBlank)
        },
        _embedded: {
          leads: [
            {
              name: `–ó–∞—è–≤–∫–∞ –æ—Ç ${name}`
            }
          ],
          contacts: [
            {
              name,
              custom_fields_values: [
                {
                  field_code: 'PHONE',
                  values: [{ value: phone }]
                }
              ]
            }
          ]
        }
      }
    ]

    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏–∑ —Å–∞–±–¥–æ–º–µ–Ω–∞
    const baseUrl = AMOCRM_CONFIG.subdomain.includes('.amocrm.ru')
      ? `https://${AMOCRM_CONFIG.subdomain}/api/v4/leads/unsorted/forms`
      : `https://${AMOCRM_CONFIG.subdomain}.amocrm.ru/api/v4/leads/unsorted/forms`

    const response = await fetch(baseUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${AMOCRM_CONFIG.longToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    })

    if (!response.ok) {
      const errText = await response.text()
      console.error('–û—à–∏–±–∫–∞ unsorted/forms API:', errText)
      return { success: false, error: `Unsorted API error: ${response.status} - ${errText}` }
    }

    // –û—Ç–≤–µ—Ç –ø–æ –¥–æ–∫–µ: –≤–µ—Ä–Ω—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç(—ã) unsorted —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    // –ù–∞ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç –µ—â—ë "–≤ –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–º"; –ø—Ä—è–º—ã—Ö id –ª–∏–¥–∞/–∫–æ–Ω—Ç–∞–∫—Ç–∞ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –¥–æ –ø—Ä–∏–Ω—è—Ç–∏—è.
    const result = await response.json()

    // –ò–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ –¥–æ–∫–µ: –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç–¥–∞—ë—Ç—Å—è —Å—É—â–Ω–æ—Å—Ç—å —Å _embedded.leads/contacts –∏ —Å—Å—ã–ª–∫–∞–º–∏ (id –º–æ–∂–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
    const first = Array.isArray(result)? result[0] : (result?._embedded?.unsorted?.[0] || result)
    const uid = first?.uid || first?.id // uid –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–≥–æ (–µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏)
    const embedded = first?._embedded || result?._embedded
    const lead = embedded?.leads?.[0]
    const contact = embedded?.contacts?.[0]

    return {
      success: true,
      uid,
      leadId: lead?.id,
      contactId: contact?.id
    }
  } catch (error) {
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
  }
}

// ====== –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ======
export async function POST(request: NextRequest) {
  try {
    const formData: FormData = await request.json()

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.name || !formData.phone || !formData.direction) {
      return NextResponse.json({ error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' }, { status: 400 })
    }

    const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/
    if (!phoneRegex.test(formData.phone)) {
      return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞' }, { status: 400 })
    }

    // –£–≤–µ–¥–æ–º–∏–º –≤ Telegram (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ CRM)
    await sendTelegramNotification(formData)

    // –°—Ç—Ä–æ–≥–æ –ø–æ –¥–æ–∫–µ ¬´–ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–µ ‚Üí —Ñ–æ—Ä–º—ã¬ª
    const unsorted = await createUnsortedFormLead(request, formData)

    console.log('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (unsorted):', {
      name: formData.name,
      direction: formData.direction,
      timestamp: new Date().toISOString(),
      uid: unsorted.uid,
      amocrmSuccess: unsorted.success,
      leadId: unsorted.leadId,
      contactId: unsorted.contactId,
      error: unsorted.error
    })

    return NextResponse.json({
      success: unsorted.success,
      message: unsorted.success ? '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ ¬´–ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–µ¬ª' : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ AmoCRM',
      uid: unsorted.uid,
      leadId: unsorted.leadId,
      contactId: unsorted.contactId,
      error: unsorted.error
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}
