import { NextRequest, NextResponse } from 'next/server'

interface FormData {
  name: string
  phone: string
  direction: string
  message?: string
}

// AmoCRM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const AMOCRM_CONFIG = {
  subdomain: process.env.AMOCRM_SUBDOMAIN || 'your-subdomain',
  longToken: process.env.AMOCRM_LONG_TOKEN || 'your-long-token'
}

// Webhook –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const WEBHOOK_CONFIG = {
  url: process.env.WEBHOOK_URL || 'https://your-webhook-endpoint.com/leads',
  secret: process.env.WEBHOOK_SECRET || 'your-webhook-secret'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ –≤ AmoCRM
async function createAmoCRMLead(formData: FormData): Promise<{ success: boolean; leadId?: number; error?: string }> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AmoCRM
    if (!AMOCRM_CONFIG.subdomain || AMOCRM_CONFIG.subdomain === 'your-subdomain') {
      console.warn('AmoCRM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: AMOCRM_SUBDOMAIN –Ω–µ —É–∫–∞–∑–∞–Ω')
      return { 
        success: false, 
        error: 'AmoCRM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: —É–∫–∞–∂–∏—Ç–µ AMOCRM_SUBDOMAIN' 
      }
    }

    if (!AMOCRM_CONFIG.longToken || AMOCRM_CONFIG.longToken === 'your-long-token') {
      console.warn('AmoCRM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: AMOCRM_LONG_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω')
      return { 
        success: false, 
        error: 'AmoCRM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: —É–∫–∞–∂–∏—Ç–µ AMOCRM_LONG_TOKEN' 
      }
    }

  const { name, phone, direction, message } = formData

    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –≤ AmoCRM:', {
      subdomain: AMOCRM_CONFIG.subdomain,
      hasToken: !!AMOCRM_CONFIG.longToken,
      tokenLength: AMOCRM_CONFIG.longToken?.length || 0,
      tokenStart: AMOCRM_CONFIG.longToken?.substring(0, 20) + '...',
      leadData: { name, phone, direction, message }
    })
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–∏–¥ –±–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –Ω–∞—á–∞–ª–∞
    const leadData = {
      name: `–ó–∞—è–≤–∫–∞ –æ—Ç ${name} - ${direction}`,
      price: 0
    }

    console.log('–î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:', {
      name: leadData.name,
      phone: phone,
      direction: direction,
      message: message
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ subdomain —É–∂–µ –ø–æ–ª–Ω—ã–π –¥–æ–º–µ–Ω
    let baseUrl
    if (AMOCRM_CONFIG.subdomain.includes('.amocrm.ru')) {
      // –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π –¥–æ–º–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
      baseUrl = `https://${AMOCRM_CONFIG.subdomain}/api/v4/leads`
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –¥–æ–º–µ–Ω:', AMOCRM_CONFIG.subdomain)
    } else {
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ subdomain, –¥–æ–±–∞–≤–ª—è–µ–º .amocrm.ru
      baseUrl = `https://${AMOCRM_CONFIG.subdomain}.amocrm.ru/api/v4/leads`
      console.log('–î–æ–±–∞–≤–ª—è–µ–º .amocrm.ru –∫ subdomain:', AMOCRM_CONFIG.subdomain)
    }
    
    console.log('AmoCRM URL:', baseUrl)
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ URL:', {
      originalSubdomain: AMOCRM_CONFIG.subdomain,
      containsAmocrm: AMOCRM_CONFIG.subdomain.includes('.amocrm.ru'),
      finalUrl: baseUrl
    })
    
    const response = await fetch(baseUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${AMOCRM_CONFIG.longToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify([leadData])
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('–û—à–∏–±–∫–∞ AmoCRM API:', {
        status: response.status,
        statusText: response.statusText,
        error: errorText,
        url: baseUrl
      })
      return { 
        success: false, 
        error: `AmoCRM API error: ${response.status} - ${errorText}` 
      }
    }

    const result = await response.json()
    const lead = result?._embedded?.leads?.[0]
    
    console.log('–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ AmoCRM:', {
      id: lead?.id,
      name: lead?.name,
      url: lead?.id ? `https://${AMOCRM_CONFIG.subdomain}.amocrm.ru/leads/detail/${lead.id}` : null
    })

    return { 
      success: true, 
      leadId: lead?.id 
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ –≤ AmoCRM:', error)
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–∞ —á–µ—Ä–µ–∑ webhook
async function sendLeadToWebhook(formData: FormData): Promise<boolean> {
  try {
    const leadData = {
      name: formData.name,
      phone: formData.phone,
      direction: formData.direction,
      message: formData.message || '',
      timestamp: new Date().toISOString(),
      source: 'FitZone Landing',
      id: `lead_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const signature = await createWebhookSignature(leadData, WEBHOOK_CONFIG.secret)

    const response = await fetch(WEBHOOK_CONFIG.url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Webhook-Signature': signature,
        'X-Webhook-Source': 'FitZone-Landing'
      },
      body: JSON.stringify(leadData),
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SSL –æ—à–∏–±–æ–∫
      signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    })

    if (!response.ok) {
      throw new Error(`Webhook error: ${response.status}`)
    }

    console.log('–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ webhook:', leadData.id)
    return true

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–∞ —á–µ—Ä–µ–∑ webhook:', error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ webhook
async function createWebhookSignature(data: Record<string, unknown>, secret: string): Promise<string> {
  const encoder = new TextEncoder()
  const key = await crypto.subtle.importKey(
    'raw',
    encoder.encode(secret),
    { name: 'HMAC', hash: 'SHA-256' },
    false,
    ['sign']
  )
  
  const signature = await crypto.subtle.sign(
    'HMAC',
    key,
    encoder.encode(JSON.stringify(data))
  )
  
  return Array.from(new Uint8Array(signature))
    .map(b => b.toString(16).padStart(2, '0'))
    .join('')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(formData: FormData) {
  const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN
  const telegramChatId = process.env.TELEGRAM_CHAT_ID

  if (!telegramBotToken || !telegramChatId) {
    console.log('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
    return
  }

  try {
    const message = `üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ FitZone*

üë§ *–ò–º—è:* ${formData.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone}
üèÉ *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* ${formData.direction}
${formData.message ? `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${formData.message}` : ''}

‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}
üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* FitZone Landing`

    const response = await fetch(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: telegramChatId,
        text: message,
        parse_mode: 'Markdown'
      })
    })

    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`)
    }

    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
  }
}

export async function POST(request: NextRequest) {
  try {
    const formData: FormData = await request.json()

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!formData.name || !formData.phone || !formData.direction) {
      return NextResponse.json(
        { error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/
    if (!phoneRegex.test(formData.phone)) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞' },
        { status: 400 }
      )
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    await sendTelegramNotification(formData)

    // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –≤ AmoCRM
    let amocrmResult = null
    try {
      amocrmResult = await createAmoCRMLead(formData)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ –≤ AmoCRM:', error)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ AmoCRM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞ —á–µ—Ä–µ–∑ webhook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    let webhookSuccess = false
    try {
      webhookSuccess = await sendLeadToWebhook(formData)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook:', error)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    console.log('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:', {
      name: formData.name,
      direction: formData.direction,
      timestamp: new Date().toISOString(),
      amocrmSuccess: amocrmResult?.success || false,
      amocrmLeadId: amocrmResult?.leadId,
      webhookSuccess
    })

    return NextResponse.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      amocrmSuccess: amocrmResult?.success || false,
      amocrmLeadId: amocrmResult?.leadId,
      webhookSuccess
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}