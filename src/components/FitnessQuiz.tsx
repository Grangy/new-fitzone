'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  ChevronLeft, 
  Star, 
  Trophy, 
  Heart, 
  Zap, 
  Target, 
  Clock,
  Users,
  Dumbbell,
  Sparkles,
  Share2,
  RefreshCw,
  CheckCircle
} from 'lucide-react'

interface QuizQuestion {
  id: number
  question: string
  emoji: string
  options: {
    text: string
    icon: React.ComponentType<{ className?: string }>
    scores: {
      yoga: number
      pilates: number
      crossfit: number
      personal: number
      group: number
      functional: number
      zumba: number
      taebo: number
      yoga_hatha: number
      joint_gymnastics: number
      women_health: number
      oriental_dance: number
      lady_dance: number
      street_lifting: number
    }
  }[]
}

interface QuizResult {
  direction: string
  score: number
  title: string
  description: string
  benefits: string[]
  trainer: string
  price: string
  emoji: string
  color: string
  key?: string
}

const questions: QuizQuestion[] = [
  {
    id: 1,
    question: "–ö–∞–∫–∞—è —É —Ç–µ–±—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?",
    emoji: "üéØ",
    options: [
      {
        text: "–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ –≥–∏–±–∫–æ—Å—Ç—å",
        icon: Heart,
        scores: { yoga: 3, pilates: 2, crossfit: 0, personal: 1, group: 1, functional: 0, zumba: 1, taebo: 0, yoga_hatha: 3, joint_gymnastics: 2, women_health: 2, oriental_dance: 1, lady_dance: 1, street_lifting: 0 }
      },
      {
        text: "–ü–æ—Ö—É–¥–µ–Ω–∏–µ –∏ —Ç–æ–Ω—É—Å",
        icon: Zap,
        scores: { yoga: 1, pilates: 3, crossfit: 2, personal: 2, group: 2, functional: 2, zumba: 3, taebo: 2, yoga_hatha: 1, joint_gymnastics: 1, women_health: 3, oriental_dance: 2, lady_dance: 2, street_lifting: 1 }
      },
      {
        text: "–°–∏–ª–∞ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
        icon: Dumbbell,
        scores: { yoga: 0, pilates: 1, crossfit: 3, personal: 2, group: 1, functional: 3, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      },
      {
        text: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
        icon: Target,
        scores: { yoga: 1, pilates: 1, crossfit: 1, personal: 3, group: 0, functional: 1, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      }
    ]
  },
  {
    id: 2,
    question: "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º?",
    emoji: "‚è∞",
    options: [
      {
        text: "30-45 –º–∏–Ω—É—Ç",
        icon: Clock,
        scores: { yoga: 2, pilates: 3, crossfit: 1, personal: 2, group: 2, functional: 1, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      },
      {
        text: "60 –º–∏–Ω—É—Ç",
        icon: Clock,
        scores: { yoga: 3, pilates: 2, crossfit: 2, personal: 3, group: 2, functional: 2, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      },
      {
        text: "90+ –º–∏–Ω—É—Ç",
        icon: Clock,
        scores: { yoga: 1, pilates: 1, crossfit: 3, personal: 2, group: 1, functional: 3, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      }
    ]
  },
  {
    id: 3,
    question: "–ö–∞–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Ç–µ–±–µ –±–ª–∏–∂–µ?",
    emoji: "üåü",
    options: [
      {
        text: "–°–ø–æ–∫–æ–π–Ω–∞—è –∏ –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è",
        icon: Heart,
        scores: { yoga: 3, pilates: 2, crossfit: 0, personal: 1, group: 0, functional: 0, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      },
      {
        text: "–≠–Ω–µ—Ä–≥–∏—á–Ω–∞—è –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è",
        icon: Zap,
        scores: { yoga: 0, pilates: 1, crossfit: 3, personal: 1, group: 3, functional: 2, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      },
      {
        text: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–∞—è",
        icon: Target,
        scores: { yoga: 1, pilates: 2, crossfit: 1, personal: 3, group: 0, functional: 1, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      },
      {
        text: "–ö–æ–º–∞–Ω–¥–Ω–∞—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è",
        icon: Users,
        scores: { yoga: 1, pilates: 1, crossfit: 2, personal: 0, group: 3, functional: 2, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      }
    ]
  },
  {
    id: 4,
    question: "–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?",
    emoji: "üí™",
    options: [
      {
        text: "–ù–æ–≤–∏—á–æ–∫",
        icon: Star,
        scores: { yoga: 3, pilates: 3, crossfit: 0, personal: 2, group: 2, functional: 1, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      },
      {
        text: "–°—Ä–µ–¥–Ω–∏–π",
        icon: Star,
        scores: { yoga: 2, pilates: 2, crossfit: 2, personal: 2, group: 2, functional: 2, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      },
      {
        text: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        icon: Trophy,
        scores: { yoga: 1, pilates: 1, crossfit: 3, personal: 3, group: 1, functional: 3, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      }
    ]
  },
  {
    id: 5,
    question: "–ß—Ç–æ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ?",
    emoji: "‚ú®",
    options: [
      {
        text: "–¢–µ—Ö–Ω–∏–∫–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å",
        icon: CheckCircle,
        scores: { yoga: 3, pilates: 3, crossfit: 1, personal: 3, group: 1, functional: 2, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      },
      {
        text: "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        icon: Zap,
        scores: { yoga: 0, pilates: 1, crossfit: 3, personal: 2, group: 2, functional: 3, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      },
      {
        text: "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π",
        icon: Sparkles,
        scores: { yoga: 1, pilates: 2, crossfit: 2, personal: 2, group: 3, functional: 3, zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0, oriental_dance: 0, lady_dance: 0, street_lifting: 0 }
      }
    ]
  }
]

const results: { [key: string]: QuizResult } = {
  yoga: {
    direction: "–ô–æ–≥–∞",
    score: 0,
    title: "–ú–∞—Å—Ç–µ—Ä –≥–∞—Ä–º–æ–Ω–∏–∏ üßò‚Äç‚ôÄÔ∏è",
    description: "–ô–æ–≥–∞ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–µ–ª–æ–º –∏ –¥—É—Ö–æ–º. –¢—ã —Ü–µ–Ω–∏—à —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å.",
    benefits: ["–£–ª—É—á—à–µ–Ω–∏–µ –≥–∏–±–∫–æ—Å—Ç–∏", "–°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞", "–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º—ã—à—Ü –∫–æ—Ä–∞", "–£–ª—É—á—à–µ–Ω–∏–µ –æ—Å–∞–Ω–∫–∏"],
    trainer: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
    price: "–æ—Ç 800‚ÇΩ",
    emoji: "üßò‚Äç‚ôÄÔ∏è",
    color: "from-purple-500 to-pink-500"
  },
  pilates: {
    direction: "–ü–∏–ª–∞—Ç–µ—Å",
    score: 0,
    title: "–≠–∫—Å–ø–µ—Ä—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ üéØ",
    description: "–ü–∏–ª–∞—Ç–µ—Å - —Ç–≤–æ–π –≤—ã–±–æ—Ä! –¢—ã –ª—é–±–∏—à—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—É —Å –º—ã—à—Ü–∞–º–∏ –∫–æ—Ä–∞.",
    benefits: ["–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫–æ—Ä–∞", "–£–ª—É—á—à–µ–Ω–∏–µ –æ—Å–∞–Ω–∫–∏", "–†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏", "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ —Ç—Ä–∞–≤–º"],
    trainer: "–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
    price: "–æ—Ç 900‚ÇΩ",
    emoji: "üéØ",
    color: "from-green-500 to-teal-500"
  },
  crossfit: {
    direction: "–ö—Ä–æ—Å—Å—Ñ–∏—Ç",
    score: 0,
    title: "–í–æ–∏–Ω —Å–∏–ª—ã üí™",
    description: "–ö—Ä–æ—Å—Å—Ñ–∏—Ç - —ç—Ç–æ —Ç–≤–æ—è —Å—Ç–∏—Ö–∏—è! –¢—ã –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ –±—ã—Å—Ç—Ä—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.",
    benefits: ["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ", "–†–∞–∑–≤–∏—Ç–∏–µ —Å–∏–ª—ã", "–£–ª—É—á—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏", "–ö–æ–º–∞–Ω–¥–Ω—ã–π –¥—É—Ö"],
    trainer: "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤",
    price: "–æ—Ç 1200‚ÇΩ",
    emoji: "üí™",
    color: "from-red-500 to-orange-500"
  },
  personal: {
    direction: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
    score: 0,
    title: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏—Å—Ç üëë",
    description: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - —Ç–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É! –¢—ã —Ü–µ–Ω–∏—à—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ.",
    benefits: ["100% –≤–Ω–∏–º–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞", "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫"],
    trainer: "–õ—é–±–æ–π –∏–∑ –Ω–∞—à–∏—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤",
    price: "–æ—Ç 2500‚ÇΩ",
    emoji: "üëë",
    color: "from-yellow-500 to-amber-500"
  },
  group: {
    direction: "–ì—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
    score: 0,
    title: "–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫ üéâ",
    description: "–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - —ç—Ç–æ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ! –¢—ã –ª—é–±–∏—à—å —ç–Ω–µ—Ä–≥–∏—é –∫–æ–º–∞–Ω–¥—ã –∏ –≤–∑–∞–∏–º–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    benefits: ["–ú–æ—Ç–∏–≤–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã", "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º", "–î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞", "–ù–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"],
    trainer: "–ö–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤",
    price: "–æ—Ç 600‚ÇΩ",
    emoji: "üéâ",
    color: "from-blue-500 to-indigo-500"
  },
  functional: {
    direction: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥",
    score: 0,
    title: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ç–ª–µ—Ç ‚ö°",
    description: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥ - —Ç–≤–æ–π –≤—ã–±–æ—Ä! –¢—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å —Å–∏–ª—å–Ω—ã–º –∏ –ª–æ–≤–∫–∏–º –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.",
    benefits: ["–†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏–ª–∞", "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ —Ç—Ä–∞–≤–º", "–£–ª—É—á—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"],
    trainer: "–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤",
    price: "–æ—Ç 1000‚ÇΩ",
    emoji: "‚ö°",
    color: "from-cyan-500 to-blue-500"
  },
  zumba: {
    direction: "–ó—É–º–±–∞",
    score: 0,
    title: "–¢–∞–Ω—Ü–æ—Ä –∂–∏–∑–Ω–∏ üíÉ",
    description: "–ó—É–º–±–∞ - —ç—Ç–æ —Ç–≤–æ—è —Å—Ç—Ä–∞—Å—Ç—å! –¢—ã –ª—é–±–∏—à—å —Ç–∞–Ω—Ü—ã, –º—É–∑—ã–∫—É –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è.",
    benefits: ["–ö–∞—Ä–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–°–∂–∏–≥–∞–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π", "–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏", "–•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"],
    trainer: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
    price: "–æ—Ç 800‚ÇΩ",
    emoji: "üíÉ",
    color: "from-pink-500 to-purple-500"
  },
  taebo: {
    direction: "–¢–∞–π-–±–æ",
    score: 0,
    title: "–ë–æ–µ—Ü –¥—É—Ö–∞ ü•ä",
    description: "–¢–∞–π-–±–æ - —Ç–≤–æ–π —Å—Ç–∏–ª—å! –¢—ã —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–∏—Ç—å —Å–∏–ª—É, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ.",
    benefits: ["–†–∞–∑–≤–∏—Ç–∏–µ —Å–∏–ª—ã", "–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏", "–°–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞", "–ü–æ–≤—ã—à–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"],
    trainer: "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤",
    price: "–æ—Ç 900‚ÇΩ",
    emoji: "ü•ä",
    color: "from-red-500 to-orange-500"
  },
  yoga_hatha: {
    direction: "–•–∞—Ç—Ö–∞-–π–æ–≥–∞",
    score: 0,
    title: "–ú–∞—Å—Ç–µ—Ä —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è üßò",
    description: "–•–∞—Ç—Ö–∞-–π–æ–≥–∞ - —Ç–≤–æ–π –ø—É—Ç—å! –¢—ã –∏—â–µ—à—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∏–ª–æ–π –∏ –≥–∏–±–∫–æ—Å—Ç—å—é.",
    benefits: ["–£–ª—É—á—à–µ–Ω–∏–µ –≥–∏–±–∫–æ—Å—Ç–∏", "–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º—ã—à—Ü", "–°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞", "–£–ª—É—á—à–µ–Ω–∏–µ –æ—Å–∞–Ω–∫–∏"],
    trainer: "–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
    price: "–æ—Ç 800‚ÇΩ",
    emoji: "üßò",
    color: "from-green-500 to-teal-500"
  },
  joint_gymnastics: {
    direction: "–°—É—Å—Ç–∞–≤–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞",
    score: 0,
    title: "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è ü¶¥",
    description: "–°—É—Å—Ç–∞–≤–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞ - —Ç–≤–æ–π –≤—ã–±–æ—Ä! –¢—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å—É—Å—Ç–∞–≤–æ–≤ –∏ –ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç–∏.",
    benefits: ["–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç–∏", "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ —Ç—Ä–∞–≤–º", "–°–Ω—è—Ç–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è", "–û–±—â–µ–µ –æ–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ"],
    trainer: "–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤",
    price: "–æ—Ç 600‚ÇΩ",
    emoji: "ü¶¥",
    color: "from-blue-500 to-cyan-500"
  },
  women_health: {
    direction: "–ñ–µ–Ω—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
    score: 0,
    title: "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ üå∏",
    description: "–ñ–µ–Ω—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ - —Ç–≤–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç! –¢—ã —Ö–æ—á–µ—à—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Å–∏–ª—å–Ω–æ–π –∏ –∑–¥–æ—Ä–æ–≤–æ–π.",
    benefits: ["–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º—ã—à—Ü —Ç–∞–∑–∞", "–£–ª—É—á—à–µ–Ω–∏–µ –æ—Å–∞–Ω–∫–∏", "–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏", "–û–±—â–µ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ"],
    trainer: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
    price: "–æ—Ç 700‚ÇΩ",
    emoji: "üå∏",
    color: "from-pink-500 to-rose-500"
  },
  oriental_dance: {
    direction: "–í–æ—Å—Ç–æ—á–Ω—ã–µ —Ç–∞–Ω—Ü—ã",
    score: 0,
    title: "–í–æ—Å—Ç–æ—á–Ω–∞—è –∫—Ä–∞—Å–∞–≤–∏—Ü–∞ üíÉ",
    description: "–í–æ—Å—Ç–æ—á–Ω—ã–µ —Ç–∞–Ω—Ü—ã - —Ç–≤–æ—è —Å—Ç—Ä–∞—Å—Ç—å! –¢—ã –ª—é–±–∏—à—å –≥—Ä–∞—Ü–∏—é, –ø–ª–∞—Å—Ç–∏–∫—É –∏ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.",
    benefits: ["–†–∞–∑–≤–∏—Ç–∏–µ –ø–ª–∞—Å—Ç–∏–∫–∏", "–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º—ã—à—Ü", "–ü–æ–≤—ã—à–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", "–•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"],
    trainer: "–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
    price: "–æ—Ç 800‚ÇΩ",
    emoji: "üíÉ",
    color: "from-purple-500 to-pink-500"
  },
  lady_dance: {
    direction: "–õ–µ–¥–∏-–¥–µ–Ω—Å",
    score: 0,
    title: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ª–µ–¥–∏ üëë",
    description: "–õ–µ–¥–∏-–¥–µ–Ω—Å - —Ç–≤–æ–π —Å—Ç–∏–ª—å! –¢—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ–π, —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –∏ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π.",
    benefits: ["–†–∞–∑–≤–∏—Ç–∏–µ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "–ü–æ–≤—ã—à–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", "–£–ª—É—á—à–µ–Ω–∏–µ –æ—Å–∞–Ω–∫–∏", "–°–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞"],
    trainer: "–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
    price: "–æ—Ç 900‚ÇΩ",
    emoji: "üëë",
    color: "from-rose-500 to-pink-500"
  },
  street_lifting: {
    direction: "–°—Ç—Ä–∏—Ç-–ª–∏—Ñ—Ç–∏–Ω–≥",
    score: 0,
    title: "–£–ª–∏—á–Ω—ã–π –∞—Ç–ª–µ—Ç üí™",
    description: "–°—Ç—Ä–∏—Ç-–ª–∏—Ñ—Ç–∏–Ω–≥ - —Ç–≤–æ–π –≤—ã–±–æ—Ä! –¢—ã —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–∏–ª—É —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º.",
    benefits: ["–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏–ª–∞", "–†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏", "–£–ª—É—á—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", "–ü–æ–≤—ã—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏"],
    trainer: "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤",
    price: "–æ—Ç 1000‚ÇΩ",
    emoji: "üí™",
    color: "from-gray-500 to-slate-500"
  }
}

interface FitnessQuizProps {
  onComplete: (result: QuizResult) => void
  onBooking: (direction: string) => void
}

export default function FitnessQuiz({ onComplete, onBooking }: FitnessQuizProps) {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState<number[]>([])
  const [scores, setScores] = useState({
    yoga: 0,
    pilates: 0,
    crossfit: 0,
    personal: 0,
    group: 0,
    functional: 0,
    zumba: 0,
    taebo: 0,
    yoga_hatha: 0,
    joint_gymnastics: 0,
    women_health: 0,
    oriental_dance: 0,
    lady_dance: 0,
    street_lifting: 0
  })
  const [showResult, setShowResult] = useState(false)
  const [result, setResult] = useState<QuizResult | null>(null)
  const [topResults, setTopResults] = useState<QuizResult[]>([])
  const [isAnimating, setIsAnimating] = useState(false)
  const [confetti, setConfetti] = useState(false)
  const [savedProgress, setSavedProgress] = useState(false)

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ localStorage
  useEffect(() => {
    const saved = localStorage.getItem('fitnessQuizProgress')
    if (saved) {
      const { currentQuestion: savedQ, answers: savedA, scores: savedS } = JSON.parse(saved)
      setCurrentQuestion(savedQ)
      setAnswers(savedA)
      setScores(savedS)
      setSavedProgress(true)
    }
  }, [])

  useEffect(() => {
    if (answers.length > 0) {
      localStorage.setItem('fitnessQuizProgress', JSON.stringify({
        currentQuestion,
        answers,
        scores
      }))
    }
  }, [currentQuestion, answers, scores])

  const progress = ((currentQuestion + 1) / questions.length) * 100

  const handleAnswer = (optionIndex: number) => {
    if (isAnimating) return

    setIsAnimating(true)
    const question = questions[currentQuestion]
    const option = question.options[optionIndex]
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –æ—á–∫–∏
    const newAnswers = [...answers, optionIndex]
    setAnswers(newAnswers)
    
    const newScores = { ...scores }
    Object.keys(option.scores).forEach(key => {
      newScores[key as keyof typeof scores] += option.scores[key as keyof typeof option.scores]
    })
    setScores(newScores)

    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if (navigator.vibrate) {
      navigator.vibrate(50)
    }

    setTimeout(() => {
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1)
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - 1 –≥—Ä—É–ø–ø–æ–≤–æ–µ + 2 –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const allResults = Object.entries(newScores)
          .map(([key, score]) => ({ ...results[key], score, key }))
          .sort((a, b) => b.score - a.score)
        
        // –ì—Ä—É–ø–ø–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≤—Å–µ –∫—Ä–æ–º–µ personal)
        const groupDirections = allResults.filter(result => result.key !== 'personal')
        // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ personal)
        const individualDirections = allResults.filter(result => result.key === 'personal')
        
        // –í—ã–±–∏—Ä–∞–µ–º 1 –ª—É—á—à–µ–µ –≥—Ä—É–ø–ø–æ–≤–æ–µ –∏ 2 –ª—É—á—à–∏—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö
        const selectedGroup = groupDirections.slice(0, 1)
        const selectedIndividual = individualDirections.slice(0, 2)
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø–æ–≤–æ–µ, –ø–æ—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ
        const sortedResults = [...selectedGroup, ...selectedIndividual]
        
        setTopResults(sortedResults)
        setResult(sortedResults[0]) // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setShowResult(true)
        setConfetti(true)
        onComplete(sortedResults[0])
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        localStorage.removeItem('fitnessQuizProgress')
      }
      setIsAnimating(false)
    }, 300)
  }

  const goBack = () => {
    if (currentQuestion > 0 && !isAnimating) {
      setCurrentQuestion(currentQuestion - 1)
      const newAnswers = answers.slice(0, -1)
      setAnswers(newAnswers)
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏
      const newScores = { 
        yoga: 0, pilates: 0, crossfit: 0, personal: 0, group: 0, functional: 0,
        zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0,
        oriental_dance: 0, lady_dance: 0, street_lifting: 0
      }
      newAnswers.forEach((answerIndex, questionIndex) => {
        const q = questions[questionIndex]
        const option = q.options[answerIndex]
        Object.keys(option.scores).forEach(key => {
          newScores[key as keyof typeof newScores] += option.scores[key as keyof typeof option.scores]
        })
      })
      setScores(newScores)
    }
  }

  const restartQuiz = () => {
    setCurrentQuestion(0)
    setAnswers([])
    setScores({ 
      yoga: 0, pilates: 0, crossfit: 0, personal: 0, group: 0, functional: 0,
      zumba: 0, taebo: 0, yoga_hatha: 0, joint_gymnastics: 0, women_health: 0,
      oriental_dance: 0, lady_dance: 0, street_lifting: 0
    })
    setShowResult(false)
    setResult(null)
    setConfetti(false)
    localStorage.removeItem('fitnessQuizProgress')
  }

  const shareResult = () => {
    if (result && navigator.share) {
      navigator.share({
        title: `–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∏–∑–∞ FitZone: ${result.title}`,
        text: `–Ø –ø—Ä–æ—à–µ–ª –∫–≤–∏–∑ –∏ –º–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ${result.direction}! ${result.description}`,
        url: window.location.href
      })
    }
  }

  if (showResult && result) {
    return (
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        className="relative bg-white rounded-xl sm:rounded-2xl p-3 sm:p-4 lg:p-6 shadow-xl w-full max-w-xs sm:max-w-lg mx-auto"
      >
        {/* –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç */}
        {confetti && (
          <div className="absolute inset-0 pointer-events-none">
            {[...Array(20)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute w-2 h-2 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full"
                initial={{ 
                  x: Math.random() * 400,
                  y: -10,
                  rotate: 0,
                  scale: 0
                }}
                animate={{ 
                  y: 400,
                  rotate: 360,
                  scale: [0, 1, 0]
                }}
                transition={{ 
                  duration: 2,
                  delay: i * 0.1,
                  ease: "easeOut"
                }}
              />
            ))}
          </div>
        )}

        <div className="text-center">
          {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.2 }}
            className="mb-4"
          >
            <div className={`text-3xl sm:text-4xl mb-2 bg-gradient-to-r ${result.color} bg-clip-text text-transparent`}>
              {result.emoji}
            </div>
            <h2 className="text-lg sm:text-xl font-bold text-gray-900 mb-2">
              {result.title}
            </h2>
            <div className={`inline-block px-3 py-1 rounded-full bg-gradient-to-r ${result.color} text-white font-semibold text-sm mb-3`}>
              {result.direction}
            </div>
          </motion.div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
          {topResults.length > 1 && (
            <motion.div
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: 0.4 }}
              className="mb-4"
            >
              <h3 className="text-sm font-semibold text-gray-900 mb-3">–¢–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:</h3>
              <div className="flex flex-wrap gap-2 justify-center">
                {topResults.slice(1).map((rec, index) => (
                  <div key={index} className={`px-3 py-2 rounded-lg text-xs font-medium ${
                    rec.key === 'personal' 
                      ? 'bg-green-100 text-green-700 border border-green-200' 
                      : 'bg-blue-100 text-blue-700 border border-blue-200'
                  }`}>
                    <span className="mr-1">{rec.emoji}</span>
                    {rec.direction}
                  </div>
                ))}
              </div>
            </motion.div>
          )}

          {/* –û–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.4 }}
            className="mb-4"
          >
            <p className="text-gray-600 text-sm leading-relaxed mb-3">
              {result.description}
            </p>
            <div className="grid grid-cols-2 gap-1 text-xs text-gray-700">
              {result.benefits.slice(0, 4).map((benefit, index) => (
                <div key={index} className="flex items-center gap-1">
                  <CheckCircle className="w-3 h-3 text-green-500 flex-shrink-0" />
                  <span className="truncate">{benefit}</span>
                </div>
              ))}
            </div>
          </motion.div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.6 }}
            className="bg-gray-50 rounded-lg p-3 mb-4"
          >
            <div className="flex justify-between items-center text-sm">
              <div>
                <span className="text-gray-600">–¢—Ä–µ–Ω–µ—Ä: </span>
                <span className="font-semibold text-gray-900">{result.trainer}</span>
              </div>
              <div className="text-right">
                <span className="font-bold text-orange-500">{result.price}</span>
              </div>
            </div>
          </motion.div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.8 }}
            className="space-y-3"
          >
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ */}
            <button
              onClick={() => onBooking(result.direction)}
              className={`w-full bg-gradient-to-r ${result.color} text-white font-semibold py-3 px-4 rounded-lg hover:shadow-lg transition-all duration-300 text-sm`}
            >
              –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {result.direction}
            </button>
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
            {topResults.length > 1 && (
              <div className="flex flex-wrap gap-2 justify-center">
                {topResults.slice(1).map((rec, index) => (
                  <button
                    key={index}
                    onClick={() => onBooking(rec.direction)}
                    className={`px-3 py-2 rounded-lg font-medium text-xs transition-colors ${
                      rec.key === 'personal' 
                        ? 'bg-green-100 hover:bg-green-200 text-green-700' 
                        : 'bg-blue-100 hover:bg-blue-200 text-blue-700'
                    }`}
                  >
                    {rec.direction}
                  </button>
                ))}
              </div>
            )}
            
            {/* –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
            <div className="flex justify-center gap-2">
              <button
                onClick={shareResult}
                className="p-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
              >
                <Share2 className="w-4 h-4 text-gray-600" />
              </button>
              
              <button
                onClick={restartQuiz}
                className="p-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                title="–ó–∞–Ω–æ–≤–æ"
              >
                <RefreshCw className="w-4 h-4 text-gray-600" />
              </button>
            </div>
          </motion.div>
        </div>
      </motion.div>
    )
  }

  const question = questions[currentQuestion]

  return (
    <div className="bg-white rounded-2xl sm:rounded-3xl p-4 sm:p-6 lg:p-8 shadow-2xl w-full max-w-sm sm:max-w-2xl mx-auto">
      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm font-medium text-gray-600">
            –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
          </span>
          <span className="text-sm font-bold text-orange-500">
            {Math.round(progress)}%
          </span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
          <motion.div
            className="h-full bg-gradient-to-r from-orange-500 to-red-500 rounded-full"
            initial={{ width: 0 }}
            animate={{ width: `${progress}%` }}
            transition={{ duration: 0.5, ease: "easeOut" }}
          />
        </div>
        {savedProgress && currentQuestion === 0 && (
          <motion.p
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-xs text-green-600 mt-1"
          >
            ‚ú® –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          </motion.p>
        )}
      </div>

      {/* –í–æ–ø—Ä–æ—Å */}
      <AnimatePresence mode="wait">
        <motion.div
          key={currentQuestion}
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -50 }}
          transition={{ duration: 0.3 }}
        >
          <div className="text-center mb-6 sm:mb-8">
            <div className="text-3xl sm:text-4xl mb-3 sm:mb-4">{question.emoji}</div>
            <h3 className="text-lg sm:text-xl lg:text-2xl font-bold text-gray-900 mb-2 px-2">
              {question.question}
            </h3>
          </div>

          {/* –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ */}
          <div className="grid gap-3 mb-6">
            {question.options.map((option, index) => (
              <motion.button
                key={index}
                onClick={() => handleAnswer(index)}
                disabled={isAnimating}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="group p-3 sm:p-4 border-2 border-gray-200 rounded-xl sm:rounded-2xl hover:border-orange-500 hover:bg-orange-50 transition-all duration-300 text-left disabled:opacity-50"
              >
                <div className="flex items-center gap-3 sm:gap-4">
                  <div className="w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg sm:rounded-xl flex items-center justify-center text-white group-hover:scale-110 transition-transform duration-300 flex-shrink-0">
                    <option.icon className="w-5 h-5 sm:w-6 sm:h-6" />
                  </div>
                  <span className="font-medium text-sm sm:text-base text-gray-900 group-hover:text-orange-600 transition-colors">
                    {option.text}
                  </span>
                </div>
              </motion.button>
            ))}
          </div>
        </motion.div>
      </AnimatePresence>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="flex justify-between items-center">
        <button
          onClick={goBack}
          disabled={currentQuestion === 0 || isAnimating}
          className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          <ChevronLeft className="w-5 h-5" />
          –ù–∞–∑–∞–¥
        </button>

        <div className="flex gap-2">
          {questions.map((_, index) => (
            <div
              key={index}
              className={`w-2 h-2 rounded-full transition-colors ${
                index <= currentQuestion ? 'bg-orange-500' : 'bg-gray-300'
              }`}
            />
          ))}
        </div>

        <div className="w-16" /> {/* Spacer –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ */}
      </div>
    </div>
  )
}
